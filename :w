---
marp: true
---

# ソフトウェア工学について

---

# 目次

- 目的
- IT 技術の重要性について
- ソフトウェア開発の難しさ
- どうすれば良いか？

---

# 目的

- IT 技術の重要性について理解する
- ソフトウェア開発がなぜ難しいのか，その理由を理解する
- ソフトウェア開発をどうすれば良いのか，その方法や理由を理解する

---

# IT 技術の重要性について

- 現代社会において IT 技術は非常に重要
- 様々な課題が IT 技術によって解決されていっており，解決されている領域も日々どんどん広がっている
- そのため IT 技術を迅速かつ継続的にデプロイ/デリバリーしている企業が優位に立っている
  - これは IT 企業に限らず，あらゆる企業において当てはまっている事実として分析されている

---

# Accelerate 本抜粋

- 数多くの分析を行い,どのような組織文化やプラクティスなどが企業を優位にしているのかをまとめた有名な本

| 2017               | ハイパフォーマ | ミディアムパフォーマ | ローパフォーマ    |
| ------------------ | -------------- | -------------------- | ----------------- |
| デプロイの頻度     | 1 日複数回     | 週 1 回から月 1 回   | 週一回から月一回  |
| 変更のリードタイム | １時間未満     | 1 週間から 1 ヶ月    | 1 週間から 1 ヶ月 |
| MTTR               | 1 時間未満     | 1 日未満             | 1 日から 1 週間   |
| 変更失敗率         | 0-15%          | 0-15%                | 31-45%            |

### 上の表は品質と速度にトレードオフな関係がないことを示している

---

# 品質と速度

- ソフトウェア開発の文脈ではこの 2 つはどちらか一方を選択しなければいけないものではない

  - 前ページの表が物語っている ，

## 逆に言えばどちらか一方を犠牲にすると，両方とも犠牲になる

## 本当か？

---

# 考察:品質を重視して速度を軽視するケース

ここでは以下のように定義

- 品質を重視とはプログラムのバグを無くしたり，コードを綺麗にしたり，テストを充実させたりすることを過度に行うこと
- 速度を軽視とはサービスのリリース頻度が少ないこと

デメリット

- プログラムを入念に作り込んだが，利用者のニーズとマッチしなかった.
  - プログラムから作成されたサービスの品質は利用者が決めるものでもあり，利用者が満足しなければそれは品質が悪いと言える
- リリースすることで初めてわかるバグが出てきた.
- 先に同じようなサービスを他社にデプロイされた.

### 品質は高速なフィードバックによっても高めることができ,高速なフィードバックには実際にデプロイすることが必要

---

# 考察:速度を重視して品質を軽視するケース

ここでは以下のように定義

- 速度を重視とはとにかく動くプログラムを作成してとにかくデプロイする
- 品質を軽視とは汚いプログラムでも構わず，テストも準備しない.ひとまず動けばいい

デメリット

- 品質の悪いプログラムはどこを修正すれば良いかわからない状態になりやすく，さらに壊れやすい.
- 速度を重視して機能を追加したくても，どこに機能を追加すれば良いか，機能を追加してもプログラムが壊れないかは，品質が高くないとわからない.
- テストが十分でないので，変更によってバグが生じないか，ちゃんとデプロイできるかに自信がなくなる.

### 品質が高くないことには，安全/確実なプログラム作成は難しい.速度を求めるだけでは速度は手に入らない.

---

# プログラムの品質？テスト？

- プログラムの品質とは何か？
- なぜプログラムの品質が低いと機能の追加や修正が難しいのか?
- テストが十分でないと自信が持てなくなるのか？

---

# プログラムの品質
