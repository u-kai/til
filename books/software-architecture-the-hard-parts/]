# コンポーネントベース分解パターン

## アーキテクチャストーリ

-   ユーザーストーリは実装や変更が必要な機能を記述する
-                                                             アーキテクチャストーリーはアプリケーションの全体的な構造に影響を与え何らかのビジネス上の根拠を満たすリファクタリング内容を記述する
    -   スケーラビリティの向上や，市場投入時間の短縮など

## コンポーネントの特定及びサイズ調整パターン

-   モノリシックアプリケーションを移行する際にはまずコンポーネントの特定及びサイズ調整パターンから始める
-   このパターンの目的はアプリケーションのアーキテクチャコンポーネントを特定して一覧化し，コンポーネントのサイズを適切に決定することにある
-   コンポーネントのサイズを図るのは難しく，図るための便利なメトリクスとしてステートメント数がある
-   ステートメントとはソースコードないで実行される 1 つの完全なアクションを示し，{}などの特別な文字で区切られる
    -   これって結局関数とかメソッドとかではないのか？
    -   完全なアクションとは？
-   ステートメントは少なくとも，コンポーネントがどれだけの役割を果たしているのかどれだけ複雑なコンポーネントであるかを示す良い指標になる

-   アプリケーション内のコンポーネントのサイズが一定の水準であることは重要であり，一般にコンポーネントサイズの平均値から標準偏差 1~2 の間に収まるべき

## 収集すべき情報

### コンポーネント名

-   アプリケーションの図やドキュメント全体を通して，一貫性のあるコンポーネントの説明的な名前や識別子
-   コンポーネントの明確な役割と責任がすぐにわからない場合は，コンポーネント名をより説明的なものにすべき
-   本の例だと請求/支払い

### 名前空間

-   コンポーネントの物理的な識別子でそのコンポーネントを実装するソースファイルがグループ化され，保存されている場所を表す
-   この識別子は通常，名前空間，パッケージ構造，またはディレクトリ構造によって示される
-   本の例だと ss.billing.payment

### パーセント

-   コンポーネントの相対的なサイズをそのコンポーネントを含むソースコード全体閉めるパーセントで表したもの
-   この指標はそのコンポーネントを表すソースコードファイル内の総ステートメント数をアプリケーション全体の総ステートメント数で割ることで算出できる

### ステートメント数

-   そのコンポーネントに含まれる総ステートメント数

### ファイル数

## ドメイン共通コンポーネントの収集パターン

-   モノリシックアーキテクチャから分散アーキテクチャに移行する際は共通のサービスを簡単に特定，作成できるようにドメイン共通の機能を特定して統合するのが有益であることが多い

-   ドメイン共通コンポーネントの収集パターンは共通のドメインロジックを特定して収集し，コンポーネントにまとめるのに使用される

-   ドメインで共有される機能は，通知やデータのフォーマットやバリデーションのようなビジネス処理ロジックの一部であり，一部の処理で共有されるという点において基盤機能とは異なる
-   基盤機能とはログやメトリクスの収集，セキュリティといった運用的な性質を持つもので全てのプロセスに共通するもの
-   ドメイン共通機能の統合はモノリシックなシステムを分解する際に重複するサービスを排除するのに役に立つ
-   ごくわずかな違いは共通サービスにすることで簡単に解決できる

## 統制のための適応度関数のCICD導入
